<?php


/**
 * Skeleton subclass for representing a row from the 'factura' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * 05/24/10 21:44:21
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class Factura extends BaseFactura {

  private $KMTotal;
    private $HoraTotal;


    public function setMontoKM($monto){
        $this->KMTotal=$monto;
    }

    public function setMontoHora($monto){
        $this->HoraTotal=$monto;
    }


    public function getMontoKM(){
        return $this->KMTotal;
    }

    public function getMontoHora(){
        return $this->HoraTotal;
    }



      public function __toString()
  {
    return $this->getId();
  }

       public function getNombreCliente()
	{
//                //CAMBIO
//                //Obtengo el vehiculo que corresponde al ID y devuelvo el nombre
//                $vehiculo = VehiculoPeer::retrieveByPk($this->vehiculo);
//                return $vehiculo;
             $objcliente= new Cliente();
             $objcliente=$objcliente->getobjCliente($this->getCliente());
             return $objcliente->getNombre();


	}


            public function getRUTCliente()
	{
             $objcliente= new Cliente();
             $objcliente=$objcliente->getobjCliente($this->getCliente());
             return $objcliente->getRut();
	}

        
         public function getTipoMoneda()
	{
//                //CAMBIO
//                //Obtengo el vehiculo que corresponde al ID y devuelvo el nombre
//                $vehiculo = VehiculoPeer::retrieveByPk($this->vehiculo);
//                return $vehiculo;
             $objmoneda= new Moneda();
             $objmoneda=$objmoneda->getobjMoneda($this->getMoneda());
             return $objmoneda->getMoneda();
	}

        
       public function calcularTotal(){
            $param=new Parametros();
            $this->setIva($param->getIVA());
            //Calculo del total: Tomo el valor del iva, divido entre 100 y sumo uno
            //asi queda p.ej 1.22. Eso lo multiplico por el subtotal
            $this->setTotal((($this->getIva()/100)+1)*$this->getSubtotal());
            return round($this->getTotal(),2);

           }

           public function numeroFactura(){
               $param=new Parametros();
               $this->setNumFac($param->getNumFactura());
               return $this->getNumFac();
           }



 public function save(PropelPDO $con = null)
  {
    if ($this->isNew())
    {
       $objnumero=new Parametros();
        $c=new Criteria();
         $c->add(ParametrosPeer::NUMREF,'2');
         $objnumero=ParametrosPeer::doSelectOne($c);
         $objnumero->setValor($this->getNumFac()+1);
         $objnumero->save();
    }
 
    return parent::save($con);
  }



//  public function armarFactura($idFactura){
//      $c=new Criteria();
//       $c->add(FacturaPeer::ID, $idFactura,Criteria::EQUAL);
//       //guarda la factura de tmpfactura en factura
//       $factura = new Factura();
//       $factura=FacturaPeer::doSelectOne($c);
//       $tmplineafacts=TmplineafactPeer::doSelect(new Criteria());
//       foreach ($tmplineafacts as $tmplineafact){
//       $linea = new Lineafact();
//       $tmplineafact->copyInto($linea);
//       $factura->addlineafact($linea);
//       }
//
//  }





} // Factura
