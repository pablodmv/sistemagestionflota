<?php


/**
 * Skeleton subclass for representing a row from the 'orden' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * 05/24/10 21:44:21
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class Orden extends BaseOrden {

    //Esta variable es usada para seleccionar ordenes a facturar. No se persiste
    protected $seleccionado;
    


    public function getSeleccionado(){

        return $this->seleccionado;
    }

   public function setSeleccionado($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->seleccionado !== $v) {
			$this->seleccionado = $v;
			//$this->modifiedColumns[] = LocalidadPeer::CAPITAL;
		}

		return $this;
	} // setCapital()



     public function getNombreCliente()
	{
//                //CAMBIO
//                //Obtengo el vehiculo que corresponde al ID y devuelvo el nombre
//                $vehiculo = VehiculoPeer::retrieveByPk($this->vehiculo);
//                return $vehiculo;
             $objcliente= new Cliente();
             $objcliente=$objcliente->getobjCliente($this->getCliente());
             return $objcliente->getNombre();


	}

    public function getNombreProveedor()
	{
//                //CAMBIO
//                //Obtengo el vehiculo que corresponde al ID y devuelvo el nombre
//                $vehiculo = VehiculoPeer::retrieveByPk($this->vehiculo);
//                return $vehiculo;
             $objproveedor=new Proveedor();
             $objproveedor= $objproveedor->getobjProveedor($this->getProveedor());
             return $objproveedor->getnombre();


	}


            public function getDescripVehiculo()
	{
//                //CAMBIO
//                //Obtengo el vehiculo que corresponde al ID y devuelvo el nombre
//                $vehiculo = VehiculoPeer::retrieveByPk($this->vehiculo);
//                return $vehiculo;
             $objvehiculo=new Vehiculo();
             $objvehiculo= $objvehiculo->getobjVehiculo($this->getVehiculo());
             return $objvehiculo->getDescripcion();
	}

              public function getTipoMoneda()
	{
//                //CAMBIO
//                //Obtengo el vehiculo que corresponde al ID y devuelvo el nombre
//                $vehiculo = VehiculoPeer::retrieveByPk($this->vehiculo);
//                return $vehiculo;
             $objmoneda=new Moneda();
             //return "Pesos222222";
             if ($this->getMoneda()){
             $objmoneda= $objmoneda->getobjMoneda($this->getMoneda());
             return $objmoneda->getMoneda();
             }
             
	}

        public function getMontoxMoneda($moneda){
            if($moneda==$this->getMoneda()){
                return round($this->getImporte(),2);
            }else{
                $tmpMonedaaux=new Moneda();
                //Si el monto de la orden es en pesos
                //calculo monto en moneda seleccionada
           if ($this->getMoneda()>=1){
                if ($this->getMoneda()== 1){
                $tmpMoneda=$tmpMonedaaux->getobjMoneda($moneda);
                $cambio=$tmpMoneda->getTipocambio();
                return round($this->getImporte()/$cambio,2);
                }else{
                    //Si el monto es distinto, me fijo el cambio
                    //de la moneda de la orden y lo multiplico

                   $tmpMoneda=$tmpMonedaaux->getobjMoneda($this->getMoneda());
                   $cambio=$tmpMoneda->getTipocambio();
                   return round($this->getImporte()*$cambio, 2);
                }
           }
            }


        }

        public function getFacturadaDesc(){
            
            if($this->getLiquidada()){
                return "Si";
            }else{
                return "No";
            }
        }

        public function getKM(){

          //  return $this->getKmFin() - $this->getKmIni();
        }


        public function getPrecioKM($mon){
            $tar=new Tarifa();
            if ($mon==2){
            $tmpmon=new Moneda();
            $cambio=$tmpmon->getMontoMoneda($mon);
            $kilom=$this->getKilometros()*$tar->getPrecio('Km');
            return round($kilom/$cambio);
            }
            if($mon==1){
           
            return round($this->getKilometros()*$tar->getPrecio('Km'));
            }
        }

           public function getPrecioHora($mon){
               $tar=new Tarifa();
            if ($mon==2){
            $tmpmon=new Moneda();
            $cambio=$tmpmon->getMontoMoneda($mon);
            $kilom=$this->getHoras()*$tar->getPrecio('Hora');
            return round($kilom/$cambio);
            }
            if($mon==1){

            return round($this->getHoras()*$tar->getPrecio('Hora'));
            }
        }

        public function getHora(){

            //return $this->getHoraFin() - $this->getHoraIni();
        }

        

        public function __toString()                {
    return $this->getDescripcion();
                }
} // Orden
