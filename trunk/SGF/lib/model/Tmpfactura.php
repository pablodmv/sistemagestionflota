<?php


/**
 * Skeleton subclass for representing a row from the 'tmpfactura' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * 06/13/10 01:36:47
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class Tmpfactura extends BaseTmpfactura {

    private $KMTotal;
    private $HoraTotal;


    public function setKMTotal($monto){
        $this->KMTotal=$monto;
    }

    public function setHoraTotal($monto){
        $this->HoraTotal=$monto;
    }


    public function getKMTotal(){
        return $this->KMTotal;
    }

    public function getHoraTotal(){
        return $this->HoraTotal;
    }



    public function __toString()
  {
    return $this->getId();
  }


         public function getNombreCliente()
	{
             $objcliente= new Cliente();
             $objcliente=$objcliente->getobjCliente($this->getCliente());
             return $objcliente->getNombre();
	}

       public function getRUTCliente()
	{
             $objcliente= new Cliente();
             $objcliente=$objcliente->getobjCliente($this->getCliente());
             return $objcliente->getRut();
	}


         public function getTipoMoneda()
	{
//                //CAMBIO
//                //Obtengo el vehiculo que corresponde al ID y devuelvo el nombre
//                $vehiculo = VehiculoPeer::retrieveByPk($this->vehiculo);
//                return $vehiculo;
             $objmoneda= new Moneda();
             $objmoneda=$objmoneda->getobjMoneda($this->getMoneda());
             return $objmoneda->getMoneda();
	}


       public function calcularTotal(){
            $param=new Parametros();
            $this->setIva($param->getIVA());
            //Calculo del total: Tomo el valor del iva, divido entre 100 y sumo uno
            //asi queda p.ej 1.22. Eso lo multiplico por el subtotal
            $this->setTotal((($this->getIva()/100)+1)*$this->getSubtotal());
            return round($this->getTotal(),2);

           }

           public function numeroFactura(){
               $param=new Parametros();
               $this->setNumFac($param->getNumFactura());
               return $this->getNumFac();
           }
 public function getRemitoOrden($idOrden){
            $c=new Criteria();
            $c->add(RemitoPeer::ID_ORDEN, $idOrden,Criteria::EQUAL);
            return RemitoPeer::doSelect($c);
        }

 public function save(PropelPDO $con = null)
  {
  //antes de guardar, borro toda los datos de la tabla
  return parent::save($con);
  }
} // Tmpfactura
