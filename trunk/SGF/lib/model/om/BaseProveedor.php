<?php

/**
 * Base class that represents a row from the 'proveedor' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * 07/28/10 15:21:16
 *
 * @package    lib.model.om
 */
abstract class BaseProveedor extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ProveedorPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the nombre field.
	 * @var        string
	 */
	protected $nombre;

	/**
	 * The value for the razon_soc field.
	 * @var        string
	 */
	protected $razon_soc;

	/**
	 * The value for the rut field.
	 * @var        string
	 */
	protected $rut;

	/**
	 * The value for the direccion field.
	 * @var        string
	 */
	protected $direccion;

	/**
	 * The value for the telefono field.
	 * @var        int
	 */
	protected $telefono;

	/**
	 * The value for the celular field.
	 * @var        string
	 */
	protected $celular;

	/**
	 * The value for the mail field.
	 * @var        string
	 */
	protected $mail;

	/**
	 * The value for the es_empresa field.
	 * @var        boolean
	 */
	protected $es_empresa;

	/**
	 * @var        array Vehicxorden[] Collection to store aggregation of Vehicxorden objects.
	 */
	protected $collVehicxordens;

	/**
	 * @var        Criteria The criteria used to select the current contents of collVehicxordens.
	 */
	private $lastVehicxordenCriteria = null;

	/**
	 * @var        array Vehiculo[] Collection to store aggregation of Vehiculo objects.
	 */
	protected $collVehiculos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collVehiculos.
	 */
	private $lastVehiculoCriteria = null;

	/**
	 * @var        array Remito[] Collection to store aggregation of Remito objects.
	 */
	protected $collRemitos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRemitos.
	 */
	private $lastRemitoCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'ProveedorPeer';

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [nombre] column value.
	 * 
	 * @return     string
	 */
	public function getNombre()
	{
		return $this->nombre;
	}

	/**
	 * Get the [razon_soc] column value.
	 * 
	 * @return     string
	 */
	public function getRazonSoc()
	{
		return $this->razon_soc;
	}

	/**
	 * Get the [rut] column value.
	 * 
	 * @return     string
	 */
	public function getRut()
	{
		return $this->rut;
	}

	/**
	 * Get the [direccion] column value.
	 * 
	 * @return     string
	 */
	public function getDireccion()
	{
		return $this->direccion;
	}

	/**
	 * Get the [telefono] column value.
	 * 
	 * @return     int
	 */
	public function getTelefono()
	{
		return $this->telefono;
	}

	/**
	 * Get the [celular] column value.
	 * 
	 * @return     string
	 */
	public function getCelular()
	{
		return $this->celular;
	}

	/**
	 * Get the [mail] column value.
	 * 
	 * @return     string
	 */
	public function getMail()
	{
		return $this->mail;
	}

	/**
	 * Get the [es_empresa] column value.
	 * 
	 * @return     boolean
	 */
	public function getEsEmpresa()
	{
		return $this->es_empresa;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Proveedor The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = ProveedorPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [nombre] column.
	 * 
	 * @param      string $v new value
	 * @return     Proveedor The current object (for fluent API support)
	 */
	public function setNombre($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nombre !== $v) {
			$this->nombre = $v;
			$this->modifiedColumns[] = ProveedorPeer::NOMBRE;
		}

		return $this;
	} // setNombre()

	/**
	 * Set the value of [razon_soc] column.
	 * 
	 * @param      string $v new value
	 * @return     Proveedor The current object (for fluent API support)
	 */
	public function setRazonSoc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->razon_soc !== $v) {
			$this->razon_soc = $v;
			$this->modifiedColumns[] = ProveedorPeer::RAZON_SOC;
		}

		return $this;
	} // setRazonSoc()

	/**
	 * Set the value of [rut] column.
	 * 
	 * @param      string $v new value
	 * @return     Proveedor The current object (for fluent API support)
	 */
	public function setRut($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rut !== $v) {
			$this->rut = $v;
			$this->modifiedColumns[] = ProveedorPeer::RUT;
		}

		return $this;
	} // setRut()

	/**
	 * Set the value of [direccion] column.
	 * 
	 * @param      string $v new value
	 * @return     Proveedor The current object (for fluent API support)
	 */
	public function setDireccion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->direccion !== $v) {
			$this->direccion = $v;
			$this->modifiedColumns[] = ProveedorPeer::DIRECCION;
		}

		return $this;
	} // setDireccion()

	/**
	 * Set the value of [telefono] column.
	 * 
	 * @param      int $v new value
	 * @return     Proveedor The current object (for fluent API support)
	 */
	public function setTelefono($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->telefono !== $v) {
			$this->telefono = $v;
			$this->modifiedColumns[] = ProveedorPeer::TELEFONO;
		}

		return $this;
	} // setTelefono()

	/**
	 * Set the value of [celular] column.
	 * 
	 * @param      string $v new value
	 * @return     Proveedor The current object (for fluent API support)
	 */
	public function setCelular($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->celular !== $v) {
			$this->celular = $v;
			$this->modifiedColumns[] = ProveedorPeer::CELULAR;
		}

		return $this;
	} // setCelular()

	/**
	 * Set the value of [mail] column.
	 * 
	 * @param      string $v new value
	 * @return     Proveedor The current object (for fluent API support)
	 */
	public function setMail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mail !== $v) {
			$this->mail = $v;
			$this->modifiedColumns[] = ProveedorPeer::MAIL;
		}

		return $this;
	} // setMail()

	/**
	 * Set the value of [es_empresa] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Proveedor The current object (for fluent API support)
	 */
	public function setEsEmpresa($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->es_empresa !== $v) {
			$this->es_empresa = $v;
			$this->modifiedColumns[] = ProveedorPeer::ES_EMPRESA;
		}

		return $this;
	} // setEsEmpresa()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->nombre = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->razon_soc = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->rut = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->direccion = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->telefono = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->celular = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->mail = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->es_empresa = ($row[$startcol + 8] !== null) ? (boolean) $row[$startcol + 8] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 9; // 9 = ProveedorPeer::NUM_COLUMNS - ProveedorPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Proveedor object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProveedorPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = ProveedorPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collVehicxordens = null;
			$this->lastVehicxordenCriteria = null;

			$this->collVehiculos = null;
			$this->lastVehiculoCriteria = null;

			$this->collRemitos = null;
			$this->lastRemitoCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProveedorPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseProveedor:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				ProveedorPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseProveedor:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ProveedorPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseProveedor:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseProveedor:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				ProveedorPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = ProveedorPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = ProveedorPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += ProveedorPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collVehicxordens !== null) {
				foreach ($this->collVehicxordens as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collVehiculos !== null) {
				foreach ($this->collVehiculos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRemitos !== null) {
				foreach ($this->collRemitos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = ProveedorPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collVehicxordens !== null) {
					foreach ($this->collVehicxordens as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collVehiculos !== null) {
					foreach ($this->collVehiculos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRemitos !== null) {
					foreach ($this->collRemitos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ProveedorPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getNombre();
				break;
			case 2:
				return $this->getRazonSoc();
				break;
			case 3:
				return $this->getRut();
				break;
			case 4:
				return $this->getDireccion();
				break;
			case 5:
				return $this->getTelefono();
				break;
			case 6:
				return $this->getCelular();
				break;
			case 7:
				return $this->getMail();
				break;
			case 8:
				return $this->getEsEmpresa();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = ProveedorPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getNombre(),
			$keys[2] => $this->getRazonSoc(),
			$keys[3] => $this->getRut(),
			$keys[4] => $this->getDireccion(),
			$keys[5] => $this->getTelefono(),
			$keys[6] => $this->getCelular(),
			$keys[7] => $this->getMail(),
			$keys[8] => $this->getEsEmpresa(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ProveedorPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setNombre($value);
				break;
			case 2:
				$this->setRazonSoc($value);
				break;
			case 3:
				$this->setRut($value);
				break;
			case 4:
				$this->setDireccion($value);
				break;
			case 5:
				$this->setTelefono($value);
				break;
			case 6:
				$this->setCelular($value);
				break;
			case 7:
				$this->setMail($value);
				break;
			case 8:
				$this->setEsEmpresa($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = ProveedorPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setNombre($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setRazonSoc($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setRut($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setDireccion($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setTelefono($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setCelular($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setMail($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setEsEmpresa($arr[$keys[8]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);

		if ($this->isColumnModified(ProveedorPeer::ID)) $criteria->add(ProveedorPeer::ID, $this->id);
		if ($this->isColumnModified(ProveedorPeer::NOMBRE)) $criteria->add(ProveedorPeer::NOMBRE, $this->nombre);
		if ($this->isColumnModified(ProveedorPeer::RAZON_SOC)) $criteria->add(ProveedorPeer::RAZON_SOC, $this->razon_soc);
		if ($this->isColumnModified(ProveedorPeer::RUT)) $criteria->add(ProveedorPeer::RUT, $this->rut);
		if ($this->isColumnModified(ProveedorPeer::DIRECCION)) $criteria->add(ProveedorPeer::DIRECCION, $this->direccion);
		if ($this->isColumnModified(ProveedorPeer::TELEFONO)) $criteria->add(ProveedorPeer::TELEFONO, $this->telefono);
		if ($this->isColumnModified(ProveedorPeer::CELULAR)) $criteria->add(ProveedorPeer::CELULAR, $this->celular);
		if ($this->isColumnModified(ProveedorPeer::MAIL)) $criteria->add(ProveedorPeer::MAIL, $this->mail);
		if ($this->isColumnModified(ProveedorPeer::ES_EMPRESA)) $criteria->add(ProveedorPeer::ES_EMPRESA, $this->es_empresa);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);

		$criteria->add(ProveedorPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Proveedor (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setNombre($this->nombre);

		$copyObj->setRazonSoc($this->razon_soc);

		$copyObj->setRut($this->rut);

		$copyObj->setDireccion($this->direccion);

		$copyObj->setTelefono($this->telefono);

		$copyObj->setCelular($this->celular);

		$copyObj->setMail($this->mail);

		$copyObj->setEsEmpresa($this->es_empresa);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getVehicxordens() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addVehicxorden($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getVehiculos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addVehiculo($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRemitos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRemito($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Proveedor Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ProveedorPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ProveedorPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collVehicxordens collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addVehicxordens()
	 */
	public function clearVehicxordens()
	{
		$this->collVehicxordens = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collVehicxordens collection (array).
	 *
	 * By default this just sets the collVehicxordens collection to an empty array (like clearcollVehicxordens());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initVehicxordens()
	{
		$this->collVehicxordens = array();
	}

	/**
	 * Gets an array of Vehicxorden objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Proveedor has previously been saved, it will retrieve
	 * related Vehicxordens from storage. If this Proveedor is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Vehicxorden[]
	 * @throws     PropelException
	 */
	public function getVehicxordens($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVehicxordens === null) {
			if ($this->isNew()) {
			   $this->collVehicxordens = array();
			} else {

				$criteria->add(VehicxordenPeer::PROVEEDOR, $this->id);

				VehicxordenPeer::addSelectColumns($criteria);
				$this->collVehicxordens = VehicxordenPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(VehicxordenPeer::PROVEEDOR, $this->id);

				VehicxordenPeer::addSelectColumns($criteria);
				if (!isset($this->lastVehicxordenCriteria) || !$this->lastVehicxordenCriteria->equals($criteria)) {
					$this->collVehicxordens = VehicxordenPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastVehicxordenCriteria = $criteria;
		return $this->collVehicxordens;
	}

	/**
	 * Returns the number of related Vehicxorden objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Vehicxorden objects.
	 * @throws     PropelException
	 */
	public function countVehicxordens(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collVehicxordens === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(VehicxordenPeer::PROVEEDOR, $this->id);

				$count = VehicxordenPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(VehicxordenPeer::PROVEEDOR, $this->id);

				if (!isset($this->lastVehicxordenCriteria) || !$this->lastVehicxordenCriteria->equals($criteria)) {
					$count = VehicxordenPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collVehicxordens);
				}
			} else {
				$count = count($this->collVehicxordens);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Vehicxorden object to this object
	 * through the Vehicxorden foreign key attribute.
	 *
	 * @param      Vehicxorden $l Vehicxorden
	 * @return     void
	 * @throws     PropelException
	 */
	public function addVehicxorden(Vehicxorden $l)
	{
		if ($this->collVehicxordens === null) {
			$this->initVehicxordens();
		}
		if (!in_array($l, $this->collVehicxordens, true)) { // only add it if the **same** object is not already associated
			array_push($this->collVehicxordens, $l);
			$l->setProveedorRelatedByProveedor($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Proveedor is new, it will return
	 * an empty collection; or if this Proveedor has previously
	 * been saved, it will retrieve related Vehicxordens from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Proveedor.
	 */
	public function getVehicxordensJoinVehiculo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVehicxordens === null) {
			if ($this->isNew()) {
				$this->collVehicxordens = array();
			} else {

				$criteria->add(VehicxordenPeer::PROVEEDOR, $this->id);

				$this->collVehicxordens = VehicxordenPeer::doSelectJoinVehiculo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(VehicxordenPeer::PROVEEDOR, $this->id);

			if (!isset($this->lastVehicxordenCriteria) || !$this->lastVehicxordenCriteria->equals($criteria)) {
				$this->collVehicxordens = VehicxordenPeer::doSelectJoinVehiculo($criteria, $con, $join_behavior);
			}
		}
		$this->lastVehicxordenCriteria = $criteria;

		return $this->collVehicxordens;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Proveedor is new, it will return
	 * an empty collection; or if this Proveedor has previously
	 * been saved, it will retrieve related Vehicxordens from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Proveedor.
	 */
	public function getVehicxordensJoinChoferRelatedByChofer($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVehicxordens === null) {
			if ($this->isNew()) {
				$this->collVehicxordens = array();
			} else {

				$criteria->add(VehicxordenPeer::PROVEEDOR, $this->id);

				$this->collVehicxordens = VehicxordenPeer::doSelectJoinChoferRelatedByChofer($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(VehicxordenPeer::PROVEEDOR, $this->id);

			if (!isset($this->lastVehicxordenCriteria) || !$this->lastVehicxordenCriteria->equals($criteria)) {
				$this->collVehicxordens = VehicxordenPeer::doSelectJoinChoferRelatedByChofer($criteria, $con, $join_behavior);
			}
		}
		$this->lastVehicxordenCriteria = $criteria;

		return $this->collVehicxordens;
	}

	/**
	 * Clears out the collVehiculos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addVehiculos()
	 */
	public function clearVehiculos()
	{
		$this->collVehiculos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collVehiculos collection (array).
	 *
	 * By default this just sets the collVehiculos collection to an empty array (like clearcollVehiculos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initVehiculos()
	{
		$this->collVehiculos = array();
	}

	/**
	 * Gets an array of Vehiculo objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Proveedor has previously been saved, it will retrieve
	 * related Vehiculos from storage. If this Proveedor is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Vehiculo[]
	 * @throws     PropelException
	 */
	public function getVehiculos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVehiculos === null) {
			if ($this->isNew()) {
			   $this->collVehiculos = array();
			} else {

				$criteria->add(VehiculoPeer::PROVEEDOR, $this->id);

				VehiculoPeer::addSelectColumns($criteria);
				$this->collVehiculos = VehiculoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(VehiculoPeer::PROVEEDOR, $this->id);

				VehiculoPeer::addSelectColumns($criteria);
				if (!isset($this->lastVehiculoCriteria) || !$this->lastVehiculoCriteria->equals($criteria)) {
					$this->collVehiculos = VehiculoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastVehiculoCriteria = $criteria;
		return $this->collVehiculos;
	}

	/**
	 * Returns the number of related Vehiculo objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Vehiculo objects.
	 * @throws     PropelException
	 */
	public function countVehiculos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collVehiculos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(VehiculoPeer::PROVEEDOR, $this->id);

				$count = VehiculoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(VehiculoPeer::PROVEEDOR, $this->id);

				if (!isset($this->lastVehiculoCriteria) || !$this->lastVehiculoCriteria->equals($criteria)) {
					$count = VehiculoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collVehiculos);
				}
			} else {
				$count = count($this->collVehiculos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Vehiculo object to this object
	 * through the Vehiculo foreign key attribute.
	 *
	 * @param      Vehiculo $l Vehiculo
	 * @return     void
	 * @throws     PropelException
	 */
	public function addVehiculo(Vehiculo $l)
	{
		if ($this->collVehiculos === null) {
			$this->initVehiculos();
		}
		if (!in_array($l, $this->collVehiculos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collVehiculos, $l);
			$l->setProveedorRelatedByProveedor($this);
		}
	}

	/**
	 * Clears out the collRemitos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRemitos()
	 */
	public function clearRemitos()
	{
		$this->collRemitos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRemitos collection (array).
	 *
	 * By default this just sets the collRemitos collection to an empty array (like clearcollRemitos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRemitos()
	{
		$this->collRemitos = array();
	}

	/**
	 * Gets an array of Remito objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Proveedor has previously been saved, it will retrieve
	 * related Remitos from storage. If this Proveedor is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Remito[]
	 * @throws     PropelException
	 */
	public function getRemitos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRemitos === null) {
			if ($this->isNew()) {
			   $this->collRemitos = array();
			} else {

				$criteria->add(RemitoPeer::PROVEEDOR, $this->id);

				RemitoPeer::addSelectColumns($criteria);
				$this->collRemitos = RemitoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RemitoPeer::PROVEEDOR, $this->id);

				RemitoPeer::addSelectColumns($criteria);
				if (!isset($this->lastRemitoCriteria) || !$this->lastRemitoCriteria->equals($criteria)) {
					$this->collRemitos = RemitoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRemitoCriteria = $criteria;
		return $this->collRemitos;
	}

	/**
	 * Returns the number of related Remito objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Remito objects.
	 * @throws     PropelException
	 */
	public function countRemitos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRemitos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RemitoPeer::PROVEEDOR, $this->id);

				$count = RemitoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RemitoPeer::PROVEEDOR, $this->id);

				if (!isset($this->lastRemitoCriteria) || !$this->lastRemitoCriteria->equals($criteria)) {
					$count = RemitoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collRemitos);
				}
			} else {
				$count = count($this->collRemitos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Remito object to this object
	 * through the Remito foreign key attribute.
	 *
	 * @param      Remito $l Remito
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRemito(Remito $l)
	{
		if ($this->collRemitos === null) {
			$this->initRemitos();
		}
		if (!in_array($l, $this->collRemitos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRemitos, $l);
			$l->setProveedorRelatedByProveedor($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Proveedor is new, it will return
	 * an empty collection; or if this Proveedor has previously
	 * been saved, it will retrieve related Remitos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Proveedor.
	 */
	public function getRemitosJoinOrden($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRemitos === null) {
			if ($this->isNew()) {
				$this->collRemitos = array();
			} else {

				$criteria->add(RemitoPeer::PROVEEDOR, $this->id);

				$this->collRemitos = RemitoPeer::doSelectJoinOrden($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RemitoPeer::PROVEEDOR, $this->id);

			if (!isset($this->lastRemitoCriteria) || !$this->lastRemitoCriteria->equals($criteria)) {
				$this->collRemitos = RemitoPeer::doSelectJoinOrden($criteria, $con, $join_behavior);
			}
		}
		$this->lastRemitoCriteria = $criteria;

		return $this->collRemitos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Proveedor is new, it will return
	 * an empty collection; or if this Proveedor has previously
	 * been saved, it will retrieve related Remitos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Proveedor.
	 */
	public function getRemitosJoinVehiculo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRemitos === null) {
			if ($this->isNew()) {
				$this->collRemitos = array();
			} else {

				$criteria->add(RemitoPeer::PROVEEDOR, $this->id);

				$this->collRemitos = RemitoPeer::doSelectJoinVehiculo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RemitoPeer::PROVEEDOR, $this->id);

			if (!isset($this->lastRemitoCriteria) || !$this->lastRemitoCriteria->equals($criteria)) {
				$this->collRemitos = RemitoPeer::doSelectJoinVehiculo($criteria, $con, $join_behavior);
			}
		}
		$this->lastRemitoCriteria = $criteria;

		return $this->collRemitos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Proveedor is new, it will return
	 * an empty collection; or if this Proveedor has previously
	 * been saved, it will retrieve related Remitos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Proveedor.
	 */
	public function getRemitosJoinMonedaRelatedByMoneda($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ProveedorPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRemitos === null) {
			if ($this->isNew()) {
				$this->collRemitos = array();
			} else {

				$criteria->add(RemitoPeer::PROVEEDOR, $this->id);

				$this->collRemitos = RemitoPeer::doSelectJoinMonedaRelatedByMoneda($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RemitoPeer::PROVEEDOR, $this->id);

			if (!isset($this->lastRemitoCriteria) || !$this->lastRemitoCriteria->equals($criteria)) {
				$this->collRemitos = RemitoPeer::doSelectJoinMonedaRelatedByMoneda($criteria, $con, $join_behavior);
			}
		}
		$this->lastRemitoCriteria = $criteria;

		return $this->collRemitos;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collVehicxordens) {
				foreach ((array) $this->collVehicxordens as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collVehiculos) {
				foreach ((array) $this->collVehiculos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRemitos) {
				foreach ((array) $this->collRemitos as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collVehicxordens = null;
		$this->collVehiculos = null;
		$this->collRemitos = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseProveedor:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseProveedor::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseProveedor
